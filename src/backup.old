import React, { Component, Fragment } from 'react';
import { Card, CardBody, Container, Row, Col } from 'reactstrap';
import { Map, TileLayer, FeatureGroup } from 'react-leaflet';
import L from 'leaflet';
import EditControl from '../Leaflet/EditControl';

import produce from 'immer';

import * as api from '../../utils/api';

class Areas extends Component {
    state = {
        city: false,
        areas: false
    }
    render() {
        const {city, areas} = this.state;
        return (
            <Fragment>
                <Container>
                    <Row>
                        <Col>                
                            <Card style={{marginBottom:'1rem', backgroundColor:'#e9ecef'}}>
                                <CardBody>     
                                    <p style={{marginBottom:'0'}}>Areas / Districts: <strong>{city.name}</strong></p>    
                                </CardBody>
                            </Card>
                            <Card>
                                <CardBody style={{padding:'0'}}>
                                    <Map className="map-div" center={[53.4808, -2.2426]} zoom={13} zoomControl={false}>
                                        <TileLayer
                                            attribution='&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
                                            url="http://{s}.tile.osm.org/{z}/{x}/{y}.png"
                                        />
                                        <FeatureGroup ref={(reactFGref) => { this._onFeatureGroupReady(reactFGref); }}>
                                            <EditControl
                                                position='topright'
                                                draw={{
                                                    rectangle:false,
                                                    polygon:true,
                                                    polyline:false,
                                                    circle:false,
                                                    marker:false,
                                                    circlemarker:false
                                                }}
                                                onEdited={this._onEdited}
                                                onCreated={this._onCreated}
                                                onDeleted={this._onDeleted}
                                                onMounted={this._onMounted}
                                                onEditStart={this._onEditStart}
                                                onEditStop={this._onEditStop}
                                                onDeleteStart={this._onDeleteStart}
                                                onDeleteStop={this._onDeleteStop}
                                            />
                                        </FeatureGroup>
                                    </Map>                                    
                                    {areas && areas.map(area => {
                                        return(<p style={{marginBottom:'0'}} key={area._id}>{area.name}</p>)
                                    })}
                                </CardBody>
                            </Card>
                        </Col>
                    </Row>
                </Container>
            </Fragment>
        );
    }
    componentDidMount() {
        this.getCity();
        this.getAreas();
    }
    getCity = () => {
        const {params} = this.props.match;
        api.getCity(params.id)
            .then(response => {
                const {city} = response.data;
                this.setState(
                    produce(draft => {
                        draft.city = city;
                    })
                )
            })
    }
    getAreas = () => {
        const {params} = this.props.match;
        api.getCityAreas(params.id)
            .then(response => {
                const {areas} = response.data;
                this.setState(
                    produce(draft => {
                        draft.areas = areas;
                    })
                )
            })

    }
    _onFeatureGroupReady = (reactFGref) => {

        // populate the leaflet FeatureGroup with the geoJson layers

        let leafletGeoJSON = new L.GeoJSON(this.getGeoJson());
        // let leafletFG = reactFGref.leafletElement;

        leafletGeoJSON.eachLayer((layer) => {
            // leafletFG.addLayer(layer);
        });

        // store the ref for future access to content

        this._editableFG = reactFGref;
    }   
    _onCreated = (e) => {
        console.log(e);
        let type = e.layerType;
        let layer = e.layer;

            // const geoCoords = e.layer._latlngs[0];
            // const latLongs = [];
            // geoCoords.forEach((point, index) => {
            //     latLongs.push([point.lat, point.lng]);
            // });
            // const allAreaCoords = [...this.state.areaCoords, latLongs]
            // console.log(latLongs);
            // this.setState({
            //     areaCoords: allAreaCoords
            // });
        // Do whatever else you need to. (save to db; etc)
        this._onChange();
    }

    _onDeleted = (e) => {

        let numDeleted = 0;
        e.layers.eachLayer((layer) => {
            numDeleted += 1;
        })
        console.log(`onDeleted: removed ${numDeleted} layers`, e);

        this._onChange();
    }

    _onMounted = (drawControl) => {
        console.log('_onMounted', drawControl);
    }

    _onDeleteStart = (e) => {
        console.log('_onDeleteStart', e);
    }

    _onDeleteStop = (e) => {
        console.log('_onDeleteStop', e);
    }

    _onChange = () => {

        // this._editableFG contains the edited geometry, which can be manipulated through the leaflet API

        const { onChange } = this.props;

        if (!this._editableFG || !onChange) {
            return;
        }

        const geojsonData = this._editableFG.leafletElement.toGeoJSON();

        onChange(geojsonData);
    }    

    getGeoJson = () => {
        return {
            "type": "FeatureCollection",
            "features": [
                {
                    "type": "Feature",
                    "properties": {},
                    "geometry": {
                        "type": "Polygon",
                        "coordinates": [
                            [
                                [
                                    -122.48069286346434,
                                    37.800637436707525
                                ],
                                [
                                    -122.48069286346434,
                                    37.803104310307276
                                ],
                                [
                                    -122.47950196266174,
                                    37.803104310307276
                                ],
                                [
                                    -122.47950196266174,
                                    37.800637436707525
                                ],
                                [
                                    -122.48069286346434,
                                    37.800637436707525
                                ]
                            ]
                        ]
                    }
                }
            ]
        }
    }    
    
}

export default Areas;


//City
module.exports = [
    [{
        '_id': '54759eb3c090d83494e2d804',
        'name': 'Manchester',
        'areas': ['54759eb3c090d83494e2d800', '54759eb3c090d83494e2d801',
            '54759eb3c090d83494e2d802', '54759eb3c090d83494e2d803',
            '54759eb3c090d83494e2d805']
    },
    {
        '_id': '54759eb3c090d83494e2d806',
        'name': 'Leeds',
    }
    ],
    [{
        'city': '54759eb3c090d83494e2d804',
        '_id': '54759eb3c090d83494e2d800',
        'name': 'Chinatown',
        'description': 'Big trouble',
        'image_url': 'https://www.creativetourist.com/cms/wp-content/uploads/2016/08/chinatown-ben-williams-1280x599.jpg',
        'bounds': {
            'type': 'Polygon',
            'coordinates': [
                [53.48100468801414, -2.2387456521391873],
                [53.47878038942996, -2.2423079609870915],
                [53.47766081361639, -2.2397377341985707],
                [53.48028162419457, -2.2364030778408055]
            ]
        }

    }, {
        'city': '54759eb3c090d83494e2d804',
        '_id': '54759eb3c090d83494e2d801',
        'name': 'Victoria',
        'description': 'Near here',
        'image_url': 'http://news.images.itv.com/image/file/881858/stream_img.jpg',
        'bounds': {
            'type': 'Polygon',
            'coordinates': [
                [53.48917471214232, -2.2421133331954484],
                [53.488341273180986, -2.2454424574971203],
                [53.48687822703018, -2.2444911114871506],
                [53.48687503516448, -2.2416203096508984],
                [53.48784046384097, -2.2404245473444466],
            ]
        }
    }, {
        'city': '54759eb3c090d83494e2d804',
        '_id': '54759eb3c090d83494e2d802',
        'name': 'Northern Quarter',
        'description': 'Hipster Heaven',
        'image_url': 'https://www.creativetourist.com/cms/wp-content/uploads/2016/08/Northern-Quarter-Guide-3-1280x599.jpg',
        'bounds': {
            'type': 'Polygon',
            'coordinates': [
                [53.48605057818651, -2.2358848247677092],
                [53.48479643124272, -2.2385338414460425],
                [53.48210227893245, -2.23463005386293],
                [53.484131886909864, -2.2319074440747504]
            ]
        }
    }, {
        'city': '54759eb3c090d83494e2d804',
        '_id': '54759eb3c090d83494e2d803',
        'name': 'Oxford Road',
        'description': 'BBC and students',
        'image_url': 'https://i2-prod.manchestereveningnews.co.uk/incomi…rticle14325608.ece/ALTERNATES/s615/JS53746135.jpg',
        'bounds': {
            'type': 'Polygon',
            'coordinates': [
                [53.474885391281845, -2.2414221614599232],
                [53.47380542377608, -2.2476297989487652],
                [53.47059888381432, -2.2465713322162633],
                [53.47181004565899, -2.238989062607289]
            ]
        }
    }, {
        'city': '54759eb3c090d83494e2d804',
        '_id': '54759eb3c090d83494e2d805',
        'name': 'Arndale Centre',
        'description': 'Shoppers',
        'image_url': 'https://www.visitmanchester.com/imageresizer/?image=%2Fdmsimgs%2FBusy_mall1200x619_136550926.jpg&action=ProductDetailFullWidth2',
        'bounds': {
            'type': 'Polygon',
            'coordinates': [
                [53.483949489515275, -2.2389632463455205],
                [53.48456555763173, -2.2425379604101185],
                [53.48333939769949, -2.2432812675833707],
                [53.48255013575377, -2.239342946559191]
            ]
        }
    }
    ]
]


import React, { Component } from 'react';
import AreaSeeds from './seeds';

class Areas extends Component {
    state = {
        cityId: '',
        newCity: ''
    }

    render() {
        const cities = AreaSeeds[0];
        const areas = AreaSeeds[1];
        return (
            <div>
                <form className="add-city" onSubmit={(e) => this.addCity(e)}>
                    <input onChange={this.typeNewCity} value={this.state.newCity} placeholder="Add a new city"></input>
                    <button className="submit-city">Add a city</button>
                </form>

                Area Information by City
            <form>
                    <select onChange={this.selectCity}>
                        <option key='select' value='Select City'>Select City</option>
                        {cities.map(city => {
                            return <option key={city._id} value={city.name}>{city.name}</option>
                        })}
                    </select>
                </form>
                <ul>
                    {areas.map(area => {
                        return area.city === this.state.cityId ? <li key={area._id}>{area.name}</li> : null
                    })}
                </ul>
            </div>
        );

    };

    selectCity = (e) => {
        const city = AreaSeeds[0].filter(city => {
            return city.name === e.target.value;
        });
        this.setState({
            cityId: city[0]._id
        });
    }

    typeNewCity = (e) => {
        this.setState({
            newCity: e.target.value
        });
    }

    addCity = (e) => {
        e.preventDefault();
        console.log(this.state.newCity);
        AreaSeeds[0].push({ 'name': this.state.newCity, _id: "54759eb3c090d83494e2d808" })
        console.log(AreaSeeds[0]);
        this.setState({
            newCity: ''
        })
    }
}
export default Areas;

